
// ---
// CSS RESET.
// ---

* {
	margin: 0 ;
	padding: 0 ;
}

html {
	:where( & ) {
		background-color: var( --theme-surface ) ;
		box-sizing: border-box ;
		color: var( --theme-text ) ;
		font-family: var( --theme-font ) ;
		font-size: 18px ;
		font-weight: 400 ;
		line-height: 1.5 ;
	}

	*,
	*:before,
	*:after {
		box-sizing: inherit ;
	}
}

article,
aside,
figcaption,
figure,
footer,
header,
main,
nav,
section {
	:where( & ) {
		display: block ;
	}
}

h1, .h1 {
	:where( & ) {
		font-size: 2rem ;
	}
}

h2, .h2 {
	:where( & ) {
		font-size: 1.6rem ;
	}
}

h3, .h3 {
	:where( & ) {
		font-size: 1.3rem ;
	}
}

h4, .h4 {
	:where( & ) {
		font-size: 1.1rem ;
	}
}

h5, .h5,
h6, .h6 {
	:where( & ) {
		font-size: 1rem ;
	}
}

table {
	:where( & ) {
		border-collapse: collapse ;
		border-spacing: 0 ;
	}
}

th,
td {
	:where( & ) {
		color: inherit ;
		font-family: inherit ;
		font-size: inherit ;
		padding: 0.5rem 1rem ;
		text-align: left ;
	}
}

th {
	:where( & ) {
		font-weight: bold ;
	}
}

dt {
	:where( & ) {
		font-weight: bold ;
	}
}

ul,
ol {
	:where( & ) {
		list-style-type: none ;
	}
}

a {
	:where( & ) {
		color: inherit ;
		cursor: pointer ;
		text-decoration: underline ;
	}
}

mark {
	:where( & ) {
		background-color: var( --theme-mark-surface ) ;
		color: var( --theme-mark-text ) ;
	}
}

img {
	:where( & ) {
		border: none ;
		display: block ;
		max-width: 100% ;
	}
}

svg {
	:where( & ) {
		display: block ;
		max-width: 100% ;
	}
}

button,
input,
select,
textarea {
	:where( & ) {
		color: inherit ;
		font-family: inherit ;
		font-size: inherit ;
		line-height: inherit ;
	}
}

button {
	:where( & ) {
		cursor: pointer ;
	}
}

label[for] {
	:where( & ) {
		cursor: pointer ;
	}
}

code {
	:where( & ) {
		background-color: var( --theme-code-surface ) ;
		color: var( --theme-code-text ) ;
	}
}

pre code {
	:where( & ) {
		background-color: transparent ;
	}
}

// Note: the [tabindex] selector is being used to conditionally add "hard" focus.
*[tabindex="0"]:focus,
*:focus-visible {
	:where( & ) {
		outline: 2px solid var( --theme-accent ) ;
		outline-offset: 2px ;
	}
}

// ---
// CONTENT RE-RESET.
// ---

// This block is here to reintroduce margins for text-oriented flows. This might be swaths
// of the page that are simply more text-oriented; or, it might be for user-generated
// content to which we can't add CSS classes.
:where( .uiFlow ) {
	// Block elements.
	article,
	aside,
	blockquote,
	dd,
	dl,
	dt,
	fieldset,
	figcaption,
	figure,
	footer,
	form,
	h1,
	h2,
	h3,
	h4,
	h5,
	h6,
	header,
	hr,
	legend,
	main,
	nav,
	ol,
	p,
	pre,
	section,
	svg,
	table,
	ul,
	video
	{
		margin-bottom: 1.4rem ;
	}

	blockquote,
	pre,
	td,
	th {
		> *:last-child {
			margin-bottom: 0 ;
		}
	}

	li {
		margin-bottom: 0.2rem ;
	}

	ul,
	ol {
		padding-left: 2.5rem ;
	}

	ol {
		list-style-type: decimal ;
	}

	ul {
		list-style-type: disc ;
	}

	blockquote {
		margin-left: 2.5rem ;
		margin-right: 2.5rem ;
	}
}

// ---
// DESIGN SYSTEM.
// ---

.uiHstack {
	:where( & ) {
		align-items: center ;
		display: flex ;
		gap: 0.8rem ;
	}

	:where( & > * ) {
		flex: 0 1 auto ;
	}

	:where( &.isTopAligned ) {
		align-items: flex-start ;
	}

	:where( &.isDense ) {
		gap: 0.6rem ;
	}

	:where( &.isSparse ) {
		gap: 1.2rem ;
	}

	:where( &.isStretched ) {
		align-items: stretch ;
	}
}

.uiVstack {
	:where( & ) {
		display: flex ;
		flex-direction: column ;
		gap: 0.8rem ;
	}

	:where( & > * ) {
		flex: 0 1 auto ;
	}

	:where( &.isDense ) {
		gap: 0.6rem ;
	}

	:where( &.isSparse ) {
		gap: 1.2rem ;
	}
}

.uiEmoji {
	:where( & ) {
		font-family: var( --theme-emoji-font ) ;
	}
}

.uiUnlist {
	:where( & ) {
		list-style-type: none ;
		margin-left: 0 ;
		padding: 0 ;
	}

	:where( & > li ) {
		padding: 0 ;
	}
}

.uiReadableWidth {
	:where( & ) {
		max-width: 1000px ;
	}
}

.uiRule {
	:where( & ) {
		border: none ;
		border-top: 1px solid var( --theme-rule-hard ) ;
		margin: 1.9rem 0 1.8rem ;
	}

	:where( &.is-soft ) {
		border-top: 1px dashed var( --theme-rule-soft ) ;
	}
}

// Borrowed from the "Inclusive Component" styles - this is for elements that need to be
// in the DOM for assistive technology, but should be hidden from sighted individuals (as
// it would be redundant with the existing visuals).
// --
// https://inclusive-components.design/tooltips-toggletips/
.uiScreenReader {
	clip: rect( 0 0 0 0 ) ;
	clip-path: inset( 100% ) ;
	height: 0 ;
	overflow: hidden ;
	position: absolute ;
	white-space: nowrap ;
	width: 0 ;
}

// ---
// Form styles.
// ---

.uiButton {
	:where( & ) {
		background-color: var( --theme-button-default-surface ) ;
		border: 1px solid var( --theme-button-default-border ) ;
		border-radius: 2px ;
		color: var( --theme-button-default-text ) ;
		display: block ;
		padding: 0.6rem 1.7rem 0.6rem ;
	}

	:where( &.isPlain ) {
		background-color: transparent ;
		border-color: transparent ;
		color: inherit ;
	}

	:where( &.isSubmit ) {
		background-color: var( --theme-button-primary-surface ) ;
		border-color: var( --theme-button-primary-border ) ;
		color: var( --theme-button-primary-text ) ;
	}

	:where( &.isDestructive ) {
		background-color: var( --theme-button-destructive-surface ) ;
		border-color: var( --theme-button-destructive-border ) ;
		color: var( --theme-button-destructive-text ) ;
	}

	:where( &.isCancel ) {
		background-color: var( --theme-button-cancel-surface ) ;
		border-color: var( --theme-button-cancel-border ) ;
		color: var( --theme-button-cancel-text ) ;
	}

	:where( &.isCancel:hover ) {
		border-color: var( --theme-button-cancel-border-hover ) ;
	}

	:where( &.isText ) {
		background-color: transparent ;
		border: none ;
		border-radius: 0 ;
		color: inherit ;
		display: inline ;
		padding: 0 ;
		text-decoration: underline ;
	}
}

.uiInput {
	:where( & ) {
		background-color: var( --theme-control-background ) ;
		border: 1px solid var( --theme-control-border ) ;
		border-radius: 2px ;
		box-shadow: var( --theme-control-inset-shadow ) ;
		color: var( --theme-control-text ) ;
		display: block ;
		max-width: 100% ;
		padding: 0.6rem 0.7rem 0.6rem ;
	}

	:where( &.isSmall ) {
		max-width: 200px ;
	}

	:where( &.isMedium ) {
		max-width: 400px ;
	}

	:where( &.isLarge ) {
		max-width: 600px ;
	}

	:where( &.isFull ) {
		width: 100% ;
	}
}

.uiFile {
	:where( & ) {
		cursor: pointer ;
		display: block ;
		max-width: 100% ;
	}

	:where( &.isFull ) {
		width: 100% ;
	}

	:where( & )::-webkit-file-upload-button,
	:where( & )::file-selector-button {
		background-color: var( --theme-button-default-surface ) ;
		border: 1px solid var( --theme-button-default-border ) ;
		border-radius: 2px ;
		color: var( --theme-button-default-text ) ;
		cursor: pointer ;
		margin-right: 2ch ;
		padding: 0.4rem 0.9rem ;
	}
}

.uiCheckbox {
	:where( & ) {
		-webkit-appearance: none ;
		appearance: none ;
		background-color: var( --theme-control-background ) ;
		border: 1px solid var( --theme-control-border ) ;
		border-radius: 2px ;
		box-shadow: var( --theme-control-inset-shadow ) ;
		display: flex ;
		height: 18px ;
		margin: 0 ;
		padding: 0 ;
		width: 18px ;
	}

	:where( & ):checked::after {
		background-color: var( --theme-accent ) ;
		border-radius: 1px ;
		content: "" ;
		height: 12px ;
		margin: auto ;
		width: 12px ;
	}
}

.uiRadio {
	:where( & ) {
			-webkit-appearance: none ;
		appearance: none ;
		background-color: var( --theme-control-background ) ;
		border: 1px solid var( --theme-control-border ) ;
		border-radius: 18px ;
		box-shadow: var( --theme-control-inset-shadow ) ;
		display: flex ;
		height: 18px ;
		margin: 0 ;
		padding: 0 ;
		width: 18px ;
	}

	:where( & ):checked::after {
		background-color: var( --theme-accent ) ;
		border-radius: 8px ;
		content: "" ;
		height: 8px ;
		margin: auto ;
		width: 8px ;
	}
}

.uiSelect {
	:where( & ) {
			-webkit-appearance: none ;
		appearance: none ;
		background-color: var( --theme-control-background ) ;
		background-image: var( --select-carrot-image ) ;
		background-position-x: right 10px ;
		background-position-y: top 52% ;
		background-repeat: no-repeat ;
		border: 1px solid var( --theme-control-border ) ;
		border-radius: 2px ;
		color: var( --theme-control-text ) ;
		display: block ;
		max-width: 100% ;
		padding: 0.6rem 2rem 0.6rem 0.7rem ;
	}

	:where( &.isFull ) {
		width: 100% ;
	}
}

.uiTextarea {
	:where( & ) {
		background-color: var( --theme-control-background ) ;
		border: 1px solid var( --theme-control-border ) ;
		border-radius: 2px ;
		box-shadow: var( --theme-control-inset-shadow ) ;
		color: var( --theme-control-text ) ;
		display: block ;
		height: 10rem ;
		padding: 0.6rem 0.7rem 0.6rem ;
		width: 100% ;
	}
}

.uiInput,
.uiTextarea,
.uiSelect {
	:where( &[aria-invalid="true"] ) {
		border-color: var( --theme-control-border-error ) ;
		box-shadow: inset 0 0 0 3px var( --theme-control-border-error ) ;
	}
}

.uiField {
	:where( & ) {
		margin-bottom: 1.4rem ;
	}

	:where( &_label ) {
		display: block ;
		font-weight: bold ;
		margin-bottom: 0.6rem ;
	}

	:where( &_star ) {
		color: var( --theme-star-text ) ;
		font-weight: 400 ;
	}

	:where( &_content ) {
		margin-left: 2.2rem ;
	}

	:where( &_needsAttention ) {
		align-items: center ;
		background-color: var( --theme-error-surface ) ;
		border: 1px solid var( --theme-error-border ) ;
		border-radius: 2px ;
		color: var( --theme-error-text ) ;
		display: flex ;
		gap: 15px ;
		padding: 0.4rem 0.7rem ;

		svg {
			color: var( --theme-error-border ) ;
			height: 24px ;
			width: 24px ;
		}
	}

	@media ( max-width: 600px ) {
		:where( &_content ) {
			margin-left: 16px ;
		}
	}
}

.uiFieldset {
	:where( & ) {
		border: 1px solid var( --theme-rule-soft ) ;
		padding: 1rem 1.5rem ;
	}
}

.uiHint {
	:where( & ) {
		font-size: 90% ;
	}
}

.uiLegend {
	:where( & ) {
		padding: 0px 0.8rem ;
	}
}

.uiOptionCard {
	:where( & ) {
		display: grid ;
		gap: 0.5rem 0.9rem ;
		grid-template-areas:
			"control label"
			". description"
		;
		grid-template-columns: auto 1fr ;
		margin: 1.2rem 0 ;
	}

	:where( &_control ) {
		align-self: center ;
		grid-area: control ;
	}

	:where( &_label ) {
		align-self: center ;
		font-weight: bold ;
		grid-area: label ;
		margin: 0 ;
	}

	:where( &_description ) {
		grid-area: description ;
		margin: 0 ;
	}
}

.uiFormButtons {
	:where( & ) {
		align-items: center ;
		border-top: 1px solid var( --theme-rule-soft ) ;
		display: flex ;
		gap: 13px ;
		margin: 1.7rem 0 1rem 0 ;
		padding-top: 1.7rem ;
	}

	:where( & > * ) {
		flex: 0 1 auto ;
	}
}
